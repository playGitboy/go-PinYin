package main

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"github.com/xuender/go-py"
	"github.com/xuender/oils/base"
	"github.com/xuender/oils/ios"
)

func getPoly() map[rune][]py.Polyphonic {
	poly := map[rune][]py.Polyphonic{}
	set := base.NewSet[string]()

	base.Panic(ios.ReadLine(filepath.Join("data", "polyphonic.txt"), func(line string) error {
		if len(line) < base.Four {
			return nil
		}

		start := strings.Index(line, ":")
		if start < 0 {
			// nolint
			return fmt.Errorf("缺少: %s", line)
		}
		key := line[0:start]

		if set.Has(key) {
			// nolint
			return fmt.Errorf("重复 %s", key)
		}

		runes := []rune(key)
		tone := string(runes[1:])
		index := py.ToneIndex(tone)

		if index < 0 {
			// nolint
			return fmt.Errorf("未知音标: %s", key)
		}

		pinyin := base.Slice[string](py.RuneOption(runes[0], py.Normal, -1, nil))

		if pinyin[0] == string(runes[1:]) {
			return nil
		}

		polys, has := poly[runes[0]]
		if !has {
			polys = []py.Polyphonic{}
			poly[runes[0]] = polys
		}

		num := pinyin.Index(tone)
		poly[runes[0]] = append(
			polys,
			py.Polyphonic{
				Tone:  uint8(num),
				Words: strings.Split(line[start+1:], ","),
			},
		)

		if num < 0 {
			// nolint
			return fmt.Errorf("拼音错误 %s 0x%x, tone:%s", key, runes[0], tone)
		}

		return nil
	}))

	return poly
}

func main() {
	polyh := getPoly()

	file := base.Panic1(os.Create("polyphonic_gen.go"))
	defer file.Close()

	_, _ = file.WriteString("// Code generated by dict2data. DO NOT EDIT.\n")
	_, _ = file.WriteString("package py\n\n")
	_, _ = file.WriteString("var polyphonic = map[rune][]Polyphonic{\n")

	for han, polys := range polyh {
		_, _ = file.WriteString(fmt.Sprintf("\t'%s': {", string(han)))
		for _, pol := range polys {
			_, _ = file.WriteString(fmt.Sprintf(`		{
			Tone: %d,
			Words: []string{"%s"},
		},
`,
				pol.Tone,
				strings.Join(pol.Words, "\", \""),
			))
		}

		_, _ = file.WriteString("\t},\n")
	}

	_, _ = file.WriteString("}\n")
}
